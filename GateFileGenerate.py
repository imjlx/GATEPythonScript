#!/usr/bin/env python
# encoding: utf-8
"""
    @File       : GateFileGenerate.py
    @Time       : 2022/8/18 11:10
    @Author     : Haoran Jia
    @license    : Copyright(c) 2022 Haoran Jia. All rights reserved.
    @contact    : 21211140001@m.fudan.edu.cn
    @Description：Gate仿真脚本文件的组成成分
"""

import os
import SimpleITK as sitk
import numpy as np
import pandas as pd


# ======================================================================================================================
# Mac Components
# ======================================================================================================================

class MacComponents(object):

    @staticmethod   # File Initialization
    def initialization(fpath):
        """
        初始化脚本文件
        :param fpath: 脚本路径
        :return:
        """
        # 创建路径
        folder = os.path.dirname(fpath)
        if not os.path.exists(folder):
            os.makedirs(folder)

        with open(fpath, "w") as f:
            f.write(f"""
    
# GATE Macro Script Generated by Python
#==============================================================================

""")
        return 0

    @staticmethod   # Geometry：受照空间 phantom
    def material(fpath):
        """
        设置基本的Material Database，运行Gate前需有文件 data/utils/GateMaterials.db
        :param fpath: 脚本路径
        :return:
        """
        with open(fpath, "a") as f:
            f.write("""
#==============================================================================
# GEOMETRY
#==============================================================================

# Material

/gate/geometry/setMaterialDatabase              data/utils/GateMaterials.db

        """)

    @staticmethod
    def geometry_ct(fpath, patient_name, ct, ct_name):
        """
        将CT图像文件作为phantom输入
        :param ct_name: ct文件名(不需要格式)
        :param fpath: 脚本路径
        :param patient_name: 患者名称，在“data”下保存“CT.hdr”文件的子文件夹
        :param ct: 待输入的CT，用于计算大小
        :return:
        """
        # 根基CT大小计算world大小
        world = [round(x*y)+10 for (x, y) in zip(ct.GetSize(), ct.GetSpacing())]
        with open(fpath, "a") as f:
            f.write(f"""
# WORLD

/gate/world/geometry/setXLength       {world[0]} mm
/gate/world/geometry/setYLength       {world[1]} mm
/gate/world/geometry/setZLength       {world[2]} mm

# CT phantom

/gate/world/daughters/name                      ct
/gate/world/daughters/insert                    ImageNestedParametrisedVolume
/gate/geometry/setMaterialDatabase              data/utils/CT_Materials.db
/gate/ct/geometry/setHUToMaterialFile           data/utils/CT_HU2mat.txt
/gate/ct/geometry/setImage                      data/{patient_name}/{ct_name}.hdr

/gate/ct/placement/setTranslation               0. 0. 0. mm
/gate/ct/placement/setRotationAxis              1 0 0
/gate/ct/placement/setRotationAngle             0 deg

/gate/ct/attachPhantomSD

        """)
        pass

    @staticmethod
    def geometry_atlas(fpath, patient_name, atlas, atlas_name):
        """
            将Atlas图像文件作为phantom输入
            :param atlas_name: ct文件名(不需要格式)
            :param fpath: 脚本路径
            :param patient_name: 患者名称，在“data”下保存“Atlas.hdr”文件的子文件夹
            :param atlas: 待输入的atlas，用于计算大小
            :return:
            """
        world = [round(x * y) + 10 for (x, y) in zip(atlas.GetSize(), atlas.GetSpacing())]
        with open(fpath, "a") as f:
            f.write(f"""
# WORLD

/gate/world/geometry/setXLength       {world[0]} mm
/gate/world/geometry/setYLength       {world[1]} mm
/gate/world/geometry/setZLength       {world[2]} mm

# Atlas phantom

/gate/geometry/setMaterialDatabase              data/utils/OrganMaterials.db
/gate/world/daughters/name                      atlas
/gate/world/daughters/insert                    ImageNestedParametrisedVolume
/gate/atlas/geometry/setRangeToMaterialFile     data/utils/LabelRange.dat
/gate/atlas/geometry/setImage                   data/{patient_name}/{atlas_name}.hdr

/gate/atlas/placement/setTranslation               0. 0. 0. mm
/gate/atlas/placement/setRotationAxis              1 0 0
/gate/atlas/placement/setRotationAngle             0 deg

/gate/atlas/attachPhantomSD

""")
        pass
 
    @staticmethod   # Actor 计数
    def actor_statistic(fpath, mac_name, saveEveryNSeconds=20, folder_output="output"):
        with open(fpath, "a") as f:
            f.write(f"""
#==============================================================================
# ACTOR
#==============================================================================

# Simulation Statistic Actor

/gate/actor/addActor                SimulationStatisticActor stat
/gate/actor/stat/save               {folder_output}/{mac_name}/Statistic.txt
/gate/actor/stat/saveEveryNSeconds  {saveEveryNSeconds}

""")
        return 0

    @staticmethod
    def actor_DoseActor_image(fpath, mac_name, image, image_type, patient_name, atlas_name,
                              folder_output="output", isDoseByRegions=True):
        with open(fpath, "a") as f:
            f.write(f"""
# Dose Actor

/gate/actor/addActor                     DoseActor  dose3d
/gate/actor/dose3d/save                  {folder_output}/{mac_name}/output.mhd
/gate/actor/dose3d/attachTo    	         {image_type}
/gate/actor/dose3d/stepHitType           random
/gate/actor/dose3d/setPosition           0 0 0 cm
/gate/actor/dose3d/setResolution         {image.GetSize()[0]} {image.GetSize()[1]} {image.GetSize()[2]}
/gate/actor/dose3d/saveEveryNSeconds     600

""")
            if isDoseByRegions:
                f.write(f"""
/gate/actor/dose3d/inputDoseByRegions	 data/{patient_name}/{atlas_name}.hdr
/gate/actor/dose3d/outputDoseByRegions	 {folder_output}/{mac_name}/DoseByRegion.txt

""")

            f.write(f"""
/gate/actor/dose3d/enableEdep            true
/gate/actor/dose3d/enableUncertaintyEdep true
/gate/actor/dose3d/enableDose            true
/gate/actor/dose3d/enableUncertaintyDose true
/gate/actor/dose3d/enableNumberOfHits    true

""")
        return 0

    @staticmethod   # Physics
    def physics_petct(fpath):
        with open(fpath, "a") as f:
            f.write("""
#==============================================================================
# PHYSICS
#==============================================================================

/gate/physics/addPhysicsList emstandard_opt3

""")
        return 0

    @staticmethod   # Initialize
    def initialize(fpath):
        with open(fpath, "a") as f:
            f.write("""
#==============================================================================
# INITIALIZE
#==============================================================================

/gate/run/initialize

""")
        return 0

    @staticmethod   # Source
    def source_pet_F18(fpath, patient_name, pet: sitk.Image, pet_name):
        """
        用一个PET图像作为源
        :param pet_name: 源文件的名称(不需要格式, 默认为.hdr)
        :param fpath: 脚本路径
        :param patient_name: 患者名称，在“data”下保存“PET.hdr”文件的子文件夹
        :param pet: 待输入的PET，用于计算平移距离
        :return:
        """
        # 将PET平移半个图像大小，使(0, 0, 0)在PET中心
        position = [round(size * spacing / 2 * (-1), 2) for size, spacing in zip(pet.GetSize(), pet.GetSpacing())]
        with open(fpath, "a") as f:
            f.write(f"""
#==============================================================================
# SOURCE
#==============================================================================

/gate/source/addSource              pet     voxel
/gate/source/pet/reader/insert      image

/gate/source/pet/imageReader/translator/insert              linear
/gate/source/pet/imageReader/linearTranslator/setScale      1.0 Bq 
/gate/source/pet/imageReader/readFile                       data/{patient_name}/{pet_name}.hdr
/gate/source/pet/imageReader/verbose                        1
/gate/source/pet/setPosition                                {position[0]} {position[1]} {position[2]} mm

/gate/source/pet/gps/particle               e+
/gate/source/pet/setForcedUnstableFlag      true
/gate/source/pet/setForcedHalfLife          6586.2 s
/gate/source/pet/gps/ene/type               Mono
/gate/source/pet/gps/ene/mono               0.2498 MeV
/gate/source/pet/gps/confine                NULL
/gate/source/pet/gps/angtype                iso
/gate/source/pet/dump                       1

/gate/source/list

""")
        return 0

    
    @staticmethod   # Application 收尾：仿真时间、粒子数、随机
    def application(fpath, N):
        with open(fpath, "a") as f:
            f.write(f"""
#==============================================================================
# TIME, NUMBER, RANDOM
#==============================================================================

/gate/application/setTimeSlice   1 s
/gate/application/setTimeStart   0 s
/gate/application/setTimeStop    1 s

/gate/random/setEngineName MersenneTwister
/gate/random/setEngineSeed auto

/gate/application/noGlobalOutput
/gate/application/setNumberOfPrimariesPerRun {N}
/gate/application/startDAQ

/exit

""")
        return 0

    @staticmethod   # 其他
    def Hounsfield_material(fpath):
        """
        生成CT与material的对应文件
        :param fpath:脚本路径
        :return:
        """
        with open(fpath, "w") as f:
            f.write("""
#=====================================================================================================
# An easy way to generate Material.db and HU2mat.txt files for real CT input as phantom
#   Three files are needed in the right place:
#       1. data/utils/GateMaterials.db
#       2. data/utils/Schneider2000MaterialsTable.txt              
#       3. data/utils/Schneider2000DensitiesTable.txt
#   Two files will be generated:
#       1. data/utils/CT_Materials.db          
#       2. data/utils/CT_HU2mat.txt    
#=====================================================================================================

/gate/geometry/setMaterialDatabase                                      data/utils/GateMaterials.db

/gate/HounsfieldMaterialGenerator/SetMaterialTable                      data/utils/Schneider2000MaterialsTable.txt
/gate/HounsfieldMaterialGenerator/SetDensityTable                       data/utils/Schneider2000DensitiesTable.txt
/gate/HounsfieldMaterialGenerator/SetDensityTolerance                   0.1 g/cm3
/gate/HounsfieldMaterialGenerator/SetOutputMaterialDatabaseFilename     data/utils/CT_Materials.db
/gate/HounsfieldMaterialGenerator/SetOutputHUMaterialFilename           data/utils/CT_HU2mat.txt
/gate/HounsfieldMaterialGenerator/Generate
""")
        return 0

    @staticmethod
    def verbose(fpath):
        with open(fpath, "a") as f:
            f.write("""
#==============================================================================
# VERBOSE
#==============================================================================
/gate/verbose Physic    1
/gate/verbose Cuts      1
/gate/verbose SD        0
/gate/verbose Actions   0
/gate/verbose Actor     0
/gate/verbose Step      0
/gate/verbose Error     1
/gate/verbose Warning   1
/gate/verbose Output    0
/gate/verbose Beam      0
/gate/verbose Volume    0
/gate/verbose Image     0
/gate/verbose Geometry  2

""")

    @staticmethod
    def visualization(fpath):
        with open(fpath, "a") as f:
            f.write("""
#==============================================================================
# VISUALIZATION
#==============================================================================
/vis/open                           OGLIQt
/vis/viewer/set/viewpointThetaPhi   60 60
/vis/viewer/zoom                    1.0
/vis/drawVolume
/vis/viewer/flush
/tracking/storeTrajectory           1
/vis/scene/add/trajectories 
/vis/scene/endOfEventAction         accumulate  -1

""")


# ======================================================================================================================
# Mac Files
# ======================================================================================================================

def create_mac_PETLike_CTLike(fpath, pname, mac_name, phantom: sitk.Image, source: sitk.Image,
                              phantom_name, source_name, N=5E8, output="output",
                              isDoseByRegions=True, region_atlas_name="Atlas"):
    """
    以CT为phantom、PET(或生成的伪PET输入)为源，计算dosemap
    :param output: 输出文件夹
    :param fpath: 生成的脚本路径
    :param pname: 数据data文件夹下，保存文件的子文件夹名称
    :param mac_name: 输出output文件夹下，保存文件的子文件夹名称
    :param source_name: PET图像的名称, 没有后缀
    :param phantom_name: The name of CT Image
    :param phantom: 待输入的CT
    :param source: 待输入的PET
    :param N: 运行的粒子数
    :param isDoseByRegions:
    :param region_atlas_name:
    :return:
    """
    MacComponents.initialization(fpath)

    MacComponents.material(fpath)
    MacComponents.geometry_ct(fpath, pname, phantom, phantom_name)

    MacComponents.actor_statistic(fpath, mac_name, folder_output=output)
    MacComponents.actor_DoseActor_image(fpath, mac_name, phantom, patient_name=pname,
                                        isDoseByRegions=isDoseByRegions, atlas_name=region_atlas_name,
                                        image_type="ct", folder_output=output)

    MacComponents.physics_petct(fpath)

    MacComponents.initialize(fpath)

    MacComponents.source_pet_F18(fpath, pname, source, source_name)

    MacComponents.application(fpath, N)

    return 0


def create_mac_PETLike_AtlasLike(fpath, pname, mac_name, phantom: sitk.Image, source: sitk.Image,
                                 source_name="PET", phantom_name="Atlas", N=5E8, output="output",
                                 isDoseByRegions=True, region_atlas_name="Atlas"):

    MacComponents.initialization(fpath)

    MacComponents.geometry_atlas(fpath, pname, phantom, phantom_name)

    MacComponents.actor_statistic(fpath, mac_name, folder_output=output)
    MacComponents.actor_DoseActor_image(fpath, mac_name, phantom, patient_name=pname,
                                        isDoseByRegions=isDoseByRegions, atlas_name=region_atlas_name,
                                        image_type="atlas", folder_output=output)

    MacComponents.physics_petct(fpath)

    MacComponents.initialize(fpath)

    MacComponents.source_pet_F18(fpath, pname, source, source_name)

    MacComponents.application(fpath, N)

    return 0


# ======================================================================================================================
# Material Files
# ======================================================================================================================

def create_OrganMaterials_db(tabel=os.path.join("info", "OrganComposition.xlsx"),
                             save_path=os.path.join("data", "utils", "OrganMaterials.db")):
    """
    Generated Organ's Materials Database from ICRP Standard Organ Composition
    """
    tab_density = pd.read_excel(io=tabel, sheet_name="Density")
    tab_material = pd.read_excel(io=tabel, sheet_name="Material")

    with open(save_path, "w") as f:
        f.write("""
## Organ's Materials Database, Generated from ICRP Standard Organ Composition

[Elements]
Hydrogen:   S= H   ; Z=  1. ; A=  1.01   g/mole
Carbon:     S= C   ; Z=  6. ; A=  12.01  g/mole
Nitrogen:   S= N   ; Z=  7. ; A=  14.01  g/mole
Oxygen:     S= O   ; Z=  8. ; A=  16.00  g/mole
Sodium:     S= Na  ; Z= 11. ; A=  22.99  g/mole
Magnesium:  S= Mg  ; Z= 12. ; A=  24.305 g/mole
Phosphor:   S= P   ; Z= 15. ; A=  30.97  g/mole
Sulfur:     S= S   ; Z= 16. ; A=  32.066 g/mole
Chlorine:   S= Cl  ; Z= 17. ; A=  35.45  g/mole
Potassium:  S= K   ; Z= 19. ; A=  39.098 g/mole
Calcium:    S= Ca  ; Z= 20. ; A=  40.08  g/mole
Iron:       S= Fe  ; Z= 26. ; A=  55.845 g/mole
Iodine:     S= I   ; Z= 53. ; A=  126.90 g/mole

[Materials]
Vacuum: d=0.000001 mg/cm3 ; n=1 
	+el: name=Hydrogen ; n=1

Water: d=1.00 g/cm3; n=2 ; state=liquid
	+el: name=Hydrogen ; n=2
	+el: name=Oxygen; n=1

Air:	d=0.001205 g/cm3;	n=2
	+el: name=Nitrogen  ; f=0.8
	+el: name=Oxygen    ; f=0.2

# Organs in Standard OrganID  List
        \n""")

        for row in tab_density.iterrows():
            # 提取信息
            ID = row[1]["OrganID"]
            organ = row[1]["StandardName"] + ":"
            density = row[1]["Density(g/cm3)"]
            materialID = row[1]["Material ID"]
            elements = ["Hydrogen", "Carbon", "Nitrogen", "Oxygen", "Sodium", "Magnesium", "Phosphor",
                        "Sulfur", "Chlorine", "Potassium", "Calcium", "Iron", "Iodine"]
            composition = np.array(tab_material[tab_material["OrganID"] == materialID])[0, 2:]
            # 元素数
            N = np.where(composition, 1, 0).sum()

            # 写文件
            f.write(f"# {ID}\n")
            f.write(f"{organ:}\td={density} g/cm3;\tn={N}\n")
            for element, abundance in zip(elements, composition):
                if abundance != 0:
                    f.write(f"\t+el: name={element:<10}; f={abundance / 100:<.4}\n")
            f.write("\n")


def create_LabelRange_dat(tabel=os.path.join("info", "OrganComposition.xlsx"),
                          save_path=os.path.join("data", "utils", "LabelRange.dat")):
    OrganID: pd.DataFrame = pd.read_excel(tabel, index_col="OrganID", sheet_name="Density")
    IDs: list = [row[0] for row in OrganID.iterrows()]

    with open(save_path, "w") as f:
        # 空气
        f.write(f"{len(IDs) + 1}\n")
        f.write(f"0\t{IDs[0] - 1}\tAir\n")
        for i in range(len(IDs)):
            name = OrganID.loc[IDs[i], "StandardName"].strip()
            if i != len(IDs) - 1:
                f.write(f"{IDs[i]}\t{IDs[i + 1] - 1}\t{name}\n")
            else:
                f.write(f"{IDs[i]}\t{IDs[i]}\t{name}\n")


if __name__ == "__main__":
    create_OrganMaterials_db()
    create_LabelRange_dat()