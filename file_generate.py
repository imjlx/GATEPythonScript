#!/usr/bin/env python
# encoding: utf-8
"""
    @File       : GateFileGenerate.py
    @Time       : 2022/8/18 11:10
    @Author     : Haoran Jia
    @license    : Copyright(c) 2022 Haoran Jia. All rights reserved.
    @contact    : 21211140001@m.fudan.edu.cn
    @Description：Gate仿真脚本文件的组成成分
"""

import os
import SimpleITK as sitk
import numpy as np
import pandas as pd


# ======================================================================================================================
# Macro File Writer
# ======================================================================================================================

class MacWriter(object):
    """
    Gate Macro File Writer, write macro file for Gate Simulation.
    The file structure should be as follows:
    - data # Base folder
        - <case> # Case folder
            - CT.hdr, PET.hdr, ... # Input data files
            - <sim> # Simulation folder
                - main.mac # Generated macro file (recommended, can be changed in Write())
                - output.mhd, ... # Dose output file
    """
    def __init__(self, case: str, sim: str) -> None:
        self.case = case
        self.sim = sim

        self.content: list = []

    def initialization(self):
        """
        初始化脚本文件
        :param fpath: 脚本路径
        :return:
        """
        self.content.append(f'#==============================================================================')
        self.content.append(f'# GATE Macro Script Generated by Python Script')
        self.content.append(f'# https://github.com/imjlx/GATEPythonScript')
        self.content.append(f'#==============================================================================')
        self.content.append(f'\n')

    def material(self):
        """
        设置基本的Material Database，运行Gate前需有文件 data/utils/GateMaterials.db
        :param fpath: 脚本路径
        :return:
        """
        self.content.append(f'#==============================================================================')
        self.content.append(f'# GEOMETRY')
        self.content.append(f'#==============================================================================')
        self.content.append(f'\n')
        self.content.append(f'# Material')
        self.content.append(f'/gate/geometry/setMaterialDatabase              utils/GateMaterials.db')
        self.content.append(f'\n')

    def geometry_ct(self, img: str):
        """
        将CT图像文件作为phantom输入
        :param case: 案例名称，在“data”下保存所有数据的子文件夹
        :param ct_name: ct文件名(不需要格式)
        
        :param ct: 待输入的CT，用于计算大小
        :return:
        """
        # 根基CT大小计算world大小
        self.phantom = sitk.ReadImage(os.path.join("data", self.case, img + ".hdr"))
        world = [round(x*y)+10 for (x, y) in zip(self.phantom.GetSize(), self.phantom.GetSpacing())]
        self.content.append(f'# WORLD')
        self.content.append(f'/gate/world/geometry/setXLength       {world[0]} mm')
        self.content.append(f'/gate/world/geometry/setYLength       {world[1]} mm')
        self.content.append(f'/gate/world/geometry/setZLength       {world[2]} mm')
        self.content.append(f'\n')
        self.content.append(f'# CT phantom')
        self.content.append(f'/gate/world/daughters/name                      geo')
        self.content.append(f'/gate/world/daughters/insert                    ImageNestedParametrisedVolume')
        self.content.append(f'/gate/geometry/setMaterialDatabase              utils/CT_Materials.db')
        self.content.append(f'/gate/geo/geometry/setHUToMaterialFile           utils/CT_HU2mat.txt')
        self.content.append(f'/gate/geo/geometry/setImage                      data/{self.case}/{img}.hdr')
        self.content.append(f'\n')
        self.content.append(f'/gate/geo/placement/setTranslation               0. 0. 0. mm')
        self.content.append(f'/gate/geo/placement/setRotationAxis              1 0 0')
        self.content.append(f'/gate/geo/placement/setRotationAngle             0 deg')
        self.content.append(f'\n')
        self.content.append(f'/gate/geo/attachPhantomSD')

    def geometry_atlas(self, img: str):
        """
        将Atlas图像文件作为phantom输入
        :param case: 案例名称，在“data”下保存所有数据的子文件夹
        :param ct_name: ct文件名(不需要格式)
        
        :param ct: 待输入的CT，用于计算大小
        :return:
        """
        self.phantom = sitk.ReadImage(os.path.join("data", self.case, img + ".hdr"))
        world = [round(x*y)+10 for (x, y) in zip(self.phantom.GetSize(), self.phantom.GetSpacing())]

        self.content.append(f'# WORLD')
        self.content.append(f'/gate/world/geometry/setXLength       {world[0]} mm')
        self.content.append(f'/gate/world/geometry/setYLength       {world[1]} mm')
        self.content.append(f'/gate/world/geometry/setZLength       {world[2]} mm')
        self.content.append(f'\n')
        self.content.append(f'# Atlas phantom')
        self.content.append(f'/gate/geometry/setMaterialDatabase              utils/OrganMaterials.db')
        self.content.append(f'/gate/world/daughters/name                      geo')
        self.content.append(f'/gate/world/daughters/insert                    ImageNestedParametrisedVolume')
        self.content.append(f'/gate/geo/geometry/setRangeToMaterialFile     utils/LabelRange.dat')
        self.content.append(f'/gate/geo/geometry/setImage                   data/{self.case}/{img}.hdr')
        self.content.append(f'\n')
        self.content.append(f'/gate/geo/placement/setTranslation               0. 0. 0. mm')
        self.content.append(f'/gate/geo/placement/setRotationAxis              1 0 0')
        self.content.append(f'/gate/geo/placement/setRotationAngle             0 deg')
        self.content.append(f'\n')
        self.content.append(f'/gate/geo/attachPhantomSD')

    def actor_statistic(self, saveEveryNSeconds=2):
        self.content.append(f'#==============================================================================')
        self.content.append(f'# ACTOR')
        self.content.append(f'#==============================================================================')
        self.content.append(f'\n')
        self.content.append(f'# Simulation Statistic Actor')
        self.content.append(f'/gate/actor/addActor                SimulationStatisticActor stat')
        self.content.append(f'/gate/actor/stat/save               data/{self.case}/{self.sim}/Statistic.txt')
        self.content.append(f'/gate/actor/stat/saveEveryNSeconds  {saveEveryNSeconds}')
        self.content.append(f'\n')

    def actor_DoseActor_image(self, region=None, saveEveryNSeconds=600):
        self.content.append(f'# Dose Actor')
        self.content.append(f'/gate/actor/addActor                     DoseActor  dose3d')
        self.content.append(f'/gate/actor/dose3d/save                  data/{self.case}/{self.sim}/output.mhd')
        self.content.append(f'/gate/actor/dose3d/attachTo    	       geo')
        self.content.append(f'/gate/actor/dose3d/stepHitType           random')
        self.content.append(f'/gate/actor/dose3d/setPosition           0 0 0 cm')
        self.content.append(f'/gate/actor/dose3d/setResolution         {self.phantom.GetSize()[0]} {self.phantom.GetSize()[1]} {self.phantom.GetSize()[2]}')
        self.content.append(f'/gate/actor/dose3d/saveEveryNSeconds     {saveEveryNSeconds}')
        self.content.append(f'\n')

        if region is not None:
            self.content.append(f'/gate/actor/dose3d/inputDoseByRegions	   data/{self.case}/{region}.hdr')
            self.content.append(f'/gate/actor/dose3d/outputDoseByRegions   data/{self.case}/{self.sim}/DoseByRegion.txt')
            self.content.append(f'\n')
        
        self.content.append(f'/gate/actor/dose3d/enableEdep            true')
        self.content.append(f'/gate/actor/dose3d/enableUncertaintyEdep true')
        self.content.append(f'/gate/actor/dose3d/enableDose            true')
        self.content.append(f'/gate/actor/dose3d/enableUncertaintyDose true')
        self.content.append(f'/gate/actor/dose3d/enableNumberOfHits    true')

    def physics(self):
        self.content.append(f'#==============================================================================')
        self.content.append(f'# PHYSICS')
        self.content.append(f'#==============================================================================')
        self.content.append(f'\n')
        self.content.append(f'/gate/physics/addPhysicsList emstandard_opt3')
        self.content.append(f'\n')

    def initialize(self):
        self.content.append(f'#==============================================================================')
        self.content.append(f'# INITIALIZE')
        self.content.append(f'#==============================================================================')
        self.content.append(f'\n')
        self.content.append(f'/gate/run/initialize')
        self.content.append(f'\n')

    def source_img(self, img):
        """
        Use an image as source, such as PET
        """
        # 将PET平移半个图像大小，使(0, 0, 0)在PET中心
        self.source = sitk.ReadImage(os.path.join("data", self.case, img + ".hdr"))
        position = [round(size * spacing / 2 * (-1), 2) for size, spacing in zip(self.source.GetSize(), self.source.GetSpacing())]
        self.content.append(f'#==============================================================================')
        self.content.append(f'# SOURCE')
        self.content.append(f'#==============================================================================')
        self.content.append(f'\n')
        self.content.append(f'/gate/source/addSource              pet     voxel')
        self.content.append(f'/gate/source/pet/reader/insert      image')
        self.content.append(f'\n')
        self.content.append(f'/gate/source/pet/imageReader/translator/insert              linear')
        self.content.append(f'/gate/source/pet/imageReader/linearTranslator/setScale      1.0 Bq')
        self.content.append(f'/gate/source/pet/imageReader/readFile                       data/{self.case}/{img}.hdr')
        self.content.append(f'/gate/source/pet/imageReader/verbose                        1')
        self.content.append(f'/gate/source/pet/setPosition                                {position[0]} {position[1]} {position[2]} mm')
        self.content.append(f'\n')
        
    def source_nuclide(self, half_life=6586.2, energy=0.2498):
        self.content.append(f'/gate/source/pet/gps/particle               e+')
        self.content.append(f'/gate/source/pet/setForcedUnstableFlag      true')
        self.content.append(f'/gate/source/pet/setForcedHalfLife          {half_life} s')
        self.content.append(f'/gate/source/pet/gps/ene/type               Mono')
        self.content.append(f'/gate/source/pet/gps/ene/mono               {energy} MeV')
        self.content.append(f'/gate/source/pet/gps/confine                NULL')
        self.content.append(f'/gate/source/pet/gps/angtype                iso')
        self.content.append(f'/gate/source/pet/dump                       1')
        self.content.append(f'\n')
        self.content.append(f'/gate/source/list')

    def application(self, N):
        self.content.append(f'#==============================================================================')
        self.content.append(f'# TIME, NUMBER, RANDOM')
        self.content.append(f'#==============================================================================')
        self.content.append(f'\n')
        self.content.append(f'/gate/application/setTimeSlice   1 s')
        self.content.append(f'/gate/application/setTimeStart   0 s')
        self.content.append(f'/gate/application/setTimeStop    1 s')
        self.content.append(f'\n')
        self.content.append(f'/gate/random/setEngineName MersenneTwister')
        self.content.append(f'/gate/random/setEngineSeed auto')
        self.content.append(f'\n')
        self.content.append(f'/gate/application/noGlobalOutput')
        self.content.append(f'/gate/application/setNumberOfPrimariesPerRun {N}')
        self.content.append(f'/gate/application/startDAQ')

    def verbose(self):
        self.content.append(f'#==============================================================================')
        self.content.append(f'# VERBOSE')
        self.content.append(f'#==============================================================================')
        self.content.append(f'/gate/verbose Physic    1')
        self.content.append(f'/gate/verbose Cuts      1')
        self.content.append(f'/gate/verbose SD        0')
        self.content.append(f'/gate/verbose Actions   0')
        self.content.append(f'/gate/verbose Actor     0')
        self.content.append(f'/gate/verbose Step      0')
        self.content.append(f'/gate/verbose Error     1')
        self.content.append(f'/gate/verbose Warning   1')
        self.content.append(f'/gate/verbose Output    0')
        self.content.append(f'/gate/verbose Beam      0')
        self.content.append(f'/gate/verbose Volume    0')
        self.content.append(f'/gate/verbose Image     0')
        self.content.append(f'/gate/verbose Geometry  2')

    def visualization(self):
        self.content.append(f'#==============================================================================')
        self.content.append(f'# VISUALIZATION')
        self.content.append(f'#==============================================================================')
        self.content.append(f'/vis/open                           OGLIQt')
        self.content.append(f'/vis/viewer/set/viewpointThetaPhi   60 60')
        self.content.append(f'/vis/viewer/zoom                    1.0')
        self.content.append(f'/vis/drawVolume')
        self.content.append(f'/vis/viewer/flush')
        self.content.append(f'/tracking/storeTrajectory           1')
        self.content.append(f'/vis/scene/add/trajectories')
        self.content.append(f'/vis/scene/endOfEventAction         accumulate  -1')
    
    def Write(self, fpath=None):
        fpath = os.path.join("data", self.case, self.sim, "main.mac") if fpath is None else fpath
        os.makedirs(os.path.dirname(fpath), exist_ok=True)

        with open(fpath, "w") as f:
            f.write("\n".join(self.content))
    
    # 其他
    @staticmethod
    def Hounsfield_material(fpath):
        """
        生成CT与material的对应文件
        :param fpath:脚本路径
        :return:
        """
        with open(fpath, "w") as f:
            f.write("""
#=====================================================================================================
# An easy way to generate Material.db and HU2mat.txt files for real CT input as phantom
#   Three files are needed in the right place:
#       1. utils/GateMaterials.db
#       2. utils/Schneider2000MaterialsTable.txt              
#       3. utils/Schneider2000DensitiesTable.txt
#   Two files will be generated:
#       1. utils/CT_Materials.db          
#       2. utils/CT_HU2mat.txt    
#=====================================================================================================

/gate/geometry/setMaterialDatabase                                      utils/GateMaterials.db

/gate/HounsfieldMaterialGenerator/SetMaterialTable                      utils/Schneider2000MaterialsTable.txt
/gate/HounsfieldMaterialGenerator/SetDensityTable                       utils/Schneider2000DensitiesTable.txt
/gate/HounsfieldMaterialGenerator/SetDensityTolerance                   0.1 g/cm3
/gate/HounsfieldMaterialGenerator/SetOutputMaterialDatabaseFilename     utils/CT_Materials.db
/gate/HounsfieldMaterialGenerator/SetOutputHUMaterialFilename           utils/CT_HU2mat.txt
/gate/HounsfieldMaterialGenerator/Generate
""")
        return 0


# ======================================================================================================================
# Write Specitic Mac Files 
# ======================================================================================================================

def generate_macro_PETCT(data_folder, phantom_type: str, phantom: str, source: str, half_life=6586.2, energy=0.2498,
                         N=5E8, case='case0', sim="sim0"):
    dir = os.getcwd()
    os.chdir(data_folder)
    w = MacWriter(case, sim)
    w.initialization()
    if phantom_type == "CT":
        w.geometry_ct(img=phantom)
    elif phantom_type == "atlas" or phantom_type == "Atlas":
        w.geometry_atlas(img=phantom)
    else:
        raise ValueError("phantom_type should be 'CT' or 'atlas'")
    w.actor_statistic(saveEveryNSeconds=2)
    w.actor_DoseActor_image(saveEveryNSeconds=600)
    w.physics()
    w.initialize()
    w.source_img(img=source)
    w.source_nuclide(half_life, energy)
    w.application(N)
    w.Write()
    os.chdir(dir)

# ======================================================================================================================
# Material Files
# ======================================================================================================================

def create_OrganMaterials_db(tabel=os.path.join("info", "OrganComposition.xlsx"),
                             save_path=os.path.join("data", "utils", "OrganMaterials.db")):
    """
    Generated Organ's Materials Database from ICRP Standard Organ Composition
    """
    tab_density = pd.read_excel(io=tabel, sheet_name="Density")
    tab_material = pd.read_excel(io=tabel, sheet_name="Material")

    with open(save_path, "w") as f:
        f.write("""
## Organ's Materials Database, Generated from ICRP Standard Organ Composition

[Elements]
Hydrogen:   S= H   ; Z=  1. ; A=  1.01   g/mole
Carbon:     S= C   ; Z=  6. ; A=  12.01  g/mole
Nitrogen:   S= N   ; Z=  7. ; A=  14.01  g/mole
Oxygen:     S= O   ; Z=  8. ; A=  16.00  g/mole
Sodium:     S= Na  ; Z= 11. ; A=  22.99  g/mole
Magnesium:  S= Mg  ; Z= 12. ; A=  24.305 g/mole
Phosphor:   S= P   ; Z= 15. ; A=  30.97  g/mole
Sulfur:     S= S   ; Z= 16. ; A=  32.066 g/mole
Chlorine:   S= Cl  ; Z= 17. ; A=  35.45  g/mole
Potassium:  S= K   ; Z= 19. ; A=  39.098 g/mole
Calcium:    S= Ca  ; Z= 20. ; A=  40.08  g/mole
Iron:       S= Fe  ; Z= 26. ; A=  55.845 g/mole
Iodine:     S= I   ; Z= 53. ; A=  126.90 g/mole

[Materials]
Vacuum: d=0.000001 mg/cm3 ; n=1 
	+el: name=Hydrogen ; n=1

Water: d=1.00 g/cm3; n=2 ; state=liquid
	+el: name=Hydrogen ; n=2
	+el: name=Oxygen; n=1

Air:	d=0.001205 g/cm3;	n=2
	+el: name=Nitrogen  ; f=0.8
	+el: name=Oxygen    ; f=0.2

# Organs in Standard OrganID  List
        \n""")

        for row in tab_density.iterrows():
            # 提取信息
            ID = row[1]["OrganID"]
            organ = row[1]["StandardName"] + ":"
            density = row[1]["Density(g/cm3)"]
            materialID = row[1]["Material ID"]
            elements = ["Hydrogen", "Carbon", "Nitrogen", "Oxygen", "Sodium", "Magnesium", "Phosphor",
                        "Sulfur", "Chlorine", "Potassium", "Calcium", "Iron", "Iodine"]
            composition = np.array(tab_material[tab_material["OrganID"] == materialID])[0, 2:]
            # 元素数
            N = np.where(composition, 1, 0).sum()

            # 写文件
            f.write(f"# {ID}\n")
            f.write(f"{organ:}\td={density} g/cm3;\tn={N}\n")
            for element, abundance in zip(elements, composition):
                if abundance != 0:
                    f.write(f"\t+el: name={element:<10}; f={abundance / 100:<.4}\n")
            f.write("\n")


def create_LabelRange_dat(tabel=os.path.join("info", "OrganComposition.xlsx"),
                          save_path=os.path.join("data", "utils", "LabelRange.dat")):
    OrganID: pd.DataFrame = pd.read_excel(tabel, index_col="OrganID", sheet_name="Density")
    IDs: list = [row[0] for row in OrganID.iterrows()]

    with open(save_path, "w") as f:
        # 空气
        f.write(f"{len(IDs) + 1}\n")
        f.write(f"0\t{IDs[0] - 1}\tAir\n")
        for i in range(len(IDs)):
            name = OrganID.loc[IDs[i], "StandardName"].strip()
            if i != len(IDs) - 1:
                f.write(f"{IDs[i]}\t{IDs[i + 1] - 1}\t{name}\n")
            else:
                f.write(f"{IDs[i]}\t{IDs[i]}\t{name}\n")


if __name__ == "__main__":
    generate_macro_PETCT(data_folder="D:/MP/PSDoseCalculator_data", 
                         phantom_type="CT", phantom="CT", source="PET", N=1E7)
